(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xfc;

  // ReactElement 数据结构
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _mark: "Finn",
      };
      return element;
  };
  const jsxDEV = function (type, config) {
      // 单独处理 key 和 ref
      let key = null;
      let ref = null;
      const props = {};
      // 遍历config 给 key ref props赋值
      for (const propNmae in config) {
          const val = config[propNmae];
          if (propNmae === "key") {
              if (val != undefined) {
                  key = val + "";
              }
              continue;
          }
          if (propNmae === "ref") {
              if (val != undefined) {
                  ref = val;
              }
              continue;
          }
          // 只取config自身的值
          if ({}.hasOwnProperty.call(config, propNmae)) {
              props[propNmae] = val;
          }
      }
      // 返回ReactElement元素
      return ReactElement(type, key, ref, props);
  };

  var index = {
      version: "0.0.0",
      createElement: jsxDEV,
  };

  return index;

}));
