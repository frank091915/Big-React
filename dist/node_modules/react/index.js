(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

  // hooks集合
  const currentDispatcher = {
      current: null,
  };
  // 定义一个获取dispatcher的方法
  const resolveDispatcher = () => {
      const current = currentDispatcher.current;
      if (current === null) {
          throw new Error("hooks只能在function component中执行");
      }
      return current;
  };

  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xeac7;

  // ReactElement 数据结构
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _mark: "Finn",
      };
      return element;
  };
  const jsx = function (type, config, ...maybeChildren) {
      // 单独处理 key 和 ref
      let key = null;
      let ref = null;
      const props = {};
      // 遍历config 给 key ref props赋值
      for (const propNmae in config) {
          const val = config[propNmae];
          if (propNmae === "key") {
              if (val !== undefined) {
                  key = val + "";
              }
              continue;
          }
          if (propNmae === "ref") {
              if (val != undefined) {
                  ref = val;
              }
              continue;
          }
          // 只取config自身的值
          if ({}.hasOwnProperty.call(config, propNmae)) {
              props[propNmae] = val;
          }
      }
      // 根据maybeChildren 给props赋值
      if (maybeChildren.length) {
          if (maybeChildren.length === 1) {
              props.children = maybeChildren[0];
          }
          else {
              props.children = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  const isValidElement$1 = (object) => {
      return (typeof object === "object" &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  };

  // 暴露useState hook
  // 这里返回的是一个可以调用真正dispatcher中useState的函数，这样开发者就不能直接操作原始的hooks
  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  // 暴露数据共享层
  const _SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher,
  };
  const version = "0.0.0";
  // TODO: 根据环境导出jsx(生产环境)还是jsxDEV(开发环境)
  const createElement = jsx;
  const isValidElement = isValidElement$1;

  exports._SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createElement = createElement;
  exports.isValidElement = isValidElement;
  exports.useState = useState;
  exports.version = version;

}));
